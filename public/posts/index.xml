<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on mk</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Blog on mk</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Jul 2024 00:37:17 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a New Theme</title>
      <link>http://localhost:1313/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/creating-a-new-theme/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#introduction&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.&lt;/p&gt;&#xA;&lt;p&gt;We&amp;rsquo;ll start with creating a new site with a very basic template. Then we&amp;rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>http://localhost:1313/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/migrate-from-jekyll/</guid>
      <description>&lt;h2 id=&#34;move-static-content-to-static&#34;&gt;&#xA;  Move static content to &lt;code&gt;static&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#move-static-content-to-static&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Jekyll has a rule that any directory not starting with &lt;code&gt;_&lt;/code&gt; will be copied as-is to the &lt;code&gt;_site&lt;/code&gt; output. Hugo keeps all static content under &lt;code&gt;static&lt;/code&gt;. You should therefore move it all there.&#xA;With Jekyll, something that looked like&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/&#xA;    ▾ images/&#xA;        logo.png&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;should become&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/&#xA;    ▾ static/&#xA;        ▾ images/&#xA;            logo.png&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as &lt;code&gt;CNAME&lt;/code&gt;) to be moved to &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gopass</title>
      <link>http://localhost:1313/posts/gopass/</link>
      <pubDate>Sun, 28 Jul 2024 00:37:17 +0800</pubDate>
      <guid>http://localhost:1313/posts/gopass/</guid>
      <description>&lt;p&gt;使用 &lt;a href=&#34;https://github.com/gopasspw/gopass&#34;&gt;&lt;code&gt;gopass&lt;/code&gt;&lt;/a&gt; 管理密码。&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装&#34;&gt;&#xA;  安装&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%89%e8%a3%85&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Mac 上使用 Homebrew 安装 &lt;code&gt;brew install gopass&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;源码安装 &lt;code&gt;go install github.com/gopasspw/gopass@latest&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;使用&#34;&gt;&#xA;  使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;安装完成后确保 &lt;code&gt;gopass&lt;/code&gt; 在系统的 &lt;code&gt;PATH&lt;/code&gt; 中. 更多详细信息参考 &lt;a href=&#34;https://github.com/gopasspw/gopass/tree/master/docs&#34;&gt;docs&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;gopass setup&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;默认 &lt;code&gt;gopass&lt;/code&gt; 初始化使用 &lt;code&gt;gpg&lt;/code&gt; 加密和 &lt;code&gt;git&lt;/code&gt; 存储。默认密码存储位置 &lt;code&gt;$HOME/.local/share/gopass/stores/root&lt;/code&gt; 配置文件的位置为 &lt;code&gt;$HOME/.config/gopass/config&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;   __     _    _ _      _ _   ___   ___&#xA; /&amp;#39;_ &amp;#39;\ /&amp;#39;_&amp;#39;\ ( &amp;#39;_&amp;#39;\  /&amp;#39;_&amp;#39; )/&amp;#39;,__)/&amp;#39;,__)&#xA;( (_) |( (_) )| (_) )( (_| |\__, \\__, \&#xA;&amp;#39;\__  |&amp;#39;\___/&amp;#39;| ,__/&amp;#39;&amp;#39;\__,_)(____/(____/&#xA;( )_) |       | |&#xA; \___/&amp;#39;       (_)&#xA;&#xA;🌟 Welcome to gopass!&#xA;🌟 Initializing a new password store ...&#xA;🔐 No useable cryptographic keys. Generating new key pair&#xA;🧪 Creating cryptographic key pair (gpg) ...&#xA;🎩 Gathering information for the gpg key pair ...&#xA;🚶 What is your name? [xxx]:&#xA;📧 What is your email? [xxx]: xxx@gmail.com&#xA;⚠ Do you want to enter a passphrase? (otherwise we generate one for you) [y/N/q]: y&#xA;Enter passphrase for your new keypair:&#xA;Retype passphrase for your new keypair:&#xA;✅ Key pair for gpg generated&#xA;⚠ 🔐 We need to unlock your newly created private key now! Please enter the passphrase you just generated.&#xA;Do you want to export your public key to &amp;#34;0xDF38F357CCB30E63.pub.key&amp;#34;? [y/N/q]: y&#xA;✴ Public key exported to &amp;#34;0xDF38F357CCB30E63.pub.key&amp;#34;&#xA;✅ Key pair 0xDF38F357CCB30E63 validated&#xA;🔐 Cryptographic keys generated&#xA;🌟 Configuring your password store ...&#xA;❓ Do you want to add a git remote? [y/N/q]: N&#xA;✅ Configuration written&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;支持的命令&#34;&gt;&#xA;  支持的命令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%94%af%e6%8c%81%e7%9a%84%e5%91%bd%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;--alsoclip   -- Copy the password and show everything&#xA;--chars      -- Print specific characters from the secret&#xA;--clip       -- Copy the password value into the clipboard&#xA;--help       -- show help&#xA;--noparsing  -- Do not parse the output.&#xA;--nosync     -- Disable auto-sync&#xA;--password   -- Display only the password. Takes precedence over all other flags.&#xA;--qr         -- Print the password as a QR Code&#xA;--revision   -- Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -&amp;lt;N&amp;gt; to select the Nth oldest revision of this entry.&#xA;--unsafe     -- Display unsafe content (e.g. the password) even if safecontent is enabled&#xA;--version    -- print the version&#xA;--yes        -- Always answer yes to yes/no questions&#xA;age         -- age commands&#xA;alias       -- Print domain aliases&#xA;audit       -- Decrypt all secrets and scan for weak or leaked passwords&#xA;cat         -- Decode and print content of a binary secret to stdout, or encode and insert from stdin&#xA;clone       -- Clone a password store from a git repository&#xA;completion  -- Bash and ZSH completion&#xA;config      -- Display and edit the configuration file&#xA;convert     -- Convert a store to different backends&#xA;copy        -- Copy secrets from one location to another&#xA;create      -- Easy creation of new secrets&#xA;delete      -- Remove one or many secrets from the store&#xA;edit        -- Edit new or existing secrets&#xA;env         -- Run a subprocess with a pre-populated environment&#xA;find        -- Search for secrets&#xA;fsck        -- Check store integrity, clean up artifacts and possibly re-write secrets&#xA;fscopy      -- Copy files from or to the password store&#xA;fsmove      -- Move files from or to the password store&#xA;generate    -- Generate a new password&#xA;git         -- Run a git command inside a password store: gopass git [--store=&amp;lt;store&amp;gt;] &amp;lt;git-command&amp;gt;&#xA;grep        -- Search for secrets files containing search-string when decrypted.&#xA;help        -- Shows a list of commands or help for one command&#xA;history     -- Show password history&#xA;init        -- Initialize new password store.&#xA;insert      -- Insert a new secret&#xA;link        -- Create a symlink&#xA;list        -- List existing secrets&#xA;merge       -- Merge multiple secrets into one&#xA;mounts      -- Edit mounted stores&#xA;move        -- Move secrets from one location to another&#xA;otp         -- Generate time- or hmac-based tokens&#xA;process     -- Process a template file&#xA;pwgen       -- Generate passwords&#xA;rcs         -- Run a RCS command inside a password store&#xA;recipients  -- Edit recipient permissions&#xA;setup       -- Initialize a new password store&#xA;show        -- Display the content of a secret&#xA;sum         -- Compute the SHA256 checksum&#xA;sync        -- Sync all local stores with their remotes&#xA;templates   -- Edit templates&#xA;unclip      -- Internal command to clear clipboard&#xA;update      -- Check for updates&#xA;version     -- Display version&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>(Hu)go Template Primer</title>
      <link>http://localhost:1313/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/goisforlovers/</guid>
      <description>&lt;p&gt;Hugo uses the excellent &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt; library for&#xA;its template engine. It is an extremely lightweight engine that provides a very&#xA;small amount of logic. In our experience that it is just the right amount of&#xA;logic to be able to create a good static website. If you have used other&#xA;template systems from different languages or frameworks you will find a lot of&#xA;similarities in Go templates.&lt;/p&gt;&#xA;&lt;p&gt;This document is a brief primer on using Go templates. The &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;Go docs&lt;/a&gt;&#xA;provide more details.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started with Hugo</title>
      <link>http://localhost:1313/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/hugoisforlovers/</guid>
      <description>&lt;h2 id=&#34;step-1-install-hugo&#34;&gt;&#xA;  Step 1. Install Hugo&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#step-1-install-hugo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Go to &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo releases&lt;/a&gt; and download the&#xA;appropriate version for your OS and architecture.&lt;/p&gt;&#xA;&lt;p&gt;Save it somewhere specific as we will be using it in the next step.&lt;/p&gt;&#xA;&lt;p&gt;More complete instructions are available at &lt;a href=&#34;https://gohugo.io/getting-started/installing/&#34;&gt;Install Hugo&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;step-2-build-the-docs&#34;&gt;&#xA;  Step 2. Build the Docs&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#step-2-build-the-docs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Hugo has its own example site which happens to also be the documentation site&#xA;you are reading right now.&lt;/p&gt;&#xA;&lt;p&gt;Follow the following steps:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
